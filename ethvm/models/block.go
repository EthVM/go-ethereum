// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     block.schema.v1.asvc
 *     pendingtx.schema.v1.asvc
 */

package models

import (
	"io"
)

type Block struct {
	Number           []byte
	Hash             []byte
	ParentHash       []byte
	Uncle            bool
	Status           int32
	Timestamp        int64
	Nonce            []byte
	MixDigest        []byte
	Sha3Uncles       []byte
	LogsBloom        []byte
	StateRoot        []byte
	TransactionsRoot []byte
	Miner            []byte
	Difficulty       []byte
	TotalDifficulty  []byte
	ExtraData        []byte
	Size             []byte
	GasLimit         []byte
	GasUsed          []byte
	TxsFees          []byte
	BlockReward      []byte
	UncleReward      []byte
	Stats            UnionNullBlockStats
	Transactions     []*Transaction
	Uncles           [][]byte
}

func DeserializeBlock(r io.Reader) (*Block, error) {
	return readBlock(r)
}

func NewBlock() *Block {
	v := &Block{
		Transactions: make([]*Transaction, 0),
		Uncles:       make([][]byte, 0),
	}

	return v
}

func (r *Block) Schema() string {
	return "{\"fields\":[{\"doc\":\"The block number\",\"name\":\"number\",\"type\":\"bytes\"},{\"doc\":\"Hash of the block\",\"name\":\"hash\",\"type\":\"bytes\"},{\"doc\":\"Hash of the parent block\",\"name\":\"parentHash\",\"type\":\"bytes\"},{\"doc\":\"Determines if the block is an uncle or not\",\"name\":\"uncle\",\"type\":\"boolean\"},{\"doc\":\"Specifies the status of the block (could be CanonStatTy or SideStatTy)\",\"name\":\"status\",\"type\":\"int\"},{\"doc\":\"Unix timestamp for when the block was collated\",\"name\":\"timestamp\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"doc\":\"Hash of the generated proof-of-work\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"doc\":\"Block header mix digest\",\"name\":\"mixDigest\",\"type\":\"bytes\"},{\"doc\":\"SHA3 of the uncles data in the block\",\"name\":\"sha3Uncles\",\"type\":\"bytes\"},{\"doc\":\"Bloom filter for the logs of the block\",\"name\":\"logsBloom\",\"type\":\"bytes\"},{\"doc\":\"Root of the final state trie of the block\",\"name\":\"stateRoot\",\"type\":\"bytes\"},{\"doc\":\"Root of the final transactions trie of the block\",\"name\":\"transactionsRoot\",\"type\":\"bytes\"},{\"doc\":\"The address of the beneficiary to whom the mining rewards were given\",\"name\":\"miner\",\"type\":\"bytes\"},{\"doc\":\"Current difficulty for this block\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"doc\":\"Current total difficulty of the chain until this block\",\"name\":\"totalDifficulty\",\"type\":\"bytes\"},{\"doc\":\"The extra data field of this block\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"doc\":\"Integer the size of this block in bytes\",\"name\":\"size\",\"type\":\"bytes\"},{\"doc\":\"The maximum gas allowed in this block\",\"name\":\"gasLimit\",\"type\":\"bytes\"},{\"doc\":\"The total used gas by all transactions in this block\",\"name\":\"gasUsed\",\"type\":\"bytes\"},{\"doc\":\"Total transaction fees for this block\",\"name\":\"txsFees\",\"type\":\"bytes\"},{\"doc\":\"Total current block reward\",\"name\":\"blockReward\",\"type\":\"bytes\"},{\"doc\":\"Total current uncle reward\",\"name\":\"uncleReward\",\"type\":\"bytes\"},{\"name\":\"stats\",\"type\":[\"null\",{\"fields\":[{\"doc\":\"Time taken to find the block in milliseconds\",\"name\":\"blockTimeMs\",\"type\":\"int\"},{\"doc\":\"Number of failed transactions\",\"name\":\"numFailedTxs\",\"type\":\"int\"},{\"doc\":\"Number of successful transactions\",\"name\":\"numSuccessfulTxs\",\"type\":\"int\"},{\"doc\":\"Average gas price\",\"name\":\"avgGasPrice\",\"type\":\"bytes\"},{\"doc\":\"Total gas price\",\"name\":\"avgTxsFees\",\"type\":\"bytes\"}],\"name\":\"BlockStats\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"type\":\"record\"}]},{\"doc\":\"Array of transactions\",\"name\":\"transactions\",\"type\":{\"items\":{\"fields\":[{\"doc\":\"Hash of the transaction\",\"name\":\"hash\",\"type\":\"bytes\"},{\"doc\":\"Root of the parent block\",\"name\":\"root\",\"type\":\"bytes\"},{\"doc\":\"Integer of the transactions index position in the block\",\"name\":\"index\",\"type\":\"int\"},{\"doc\":\"Unix timestamp for when the transaction was collated\",\"name\":\"timestamp\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"doc\":\"Number of transactions sent from a given address\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"doc\":\"SHA3 of the transaction nonce\",\"name\":\"nonceHash\",\"type\":\"bytes\"},{\"doc\":\"Address of the sender\",\"name\":\"from\",\"type\":\"bytes\"},{\"doc\":\"Balance of the sender\",\"name\":\"fromBalance\",\"type\":\"bytes\"},{\"doc\":\"Address of the recipient (or null when contract creation)\",\"name\":\"to\",\"type\":[\"null\",\"bytes\"]},{\"doc\":\"Balance of the receiver (or null when contract creation)\",\"name\":\"toBalance\",\"type\":[\"null\",\"bytes\"]},{\"doc\":\"The data send along with the transaction\",\"name\":\"input\",\"type\":\"bytes\"},{\"doc\":\"If a contract is created, the address of it (or null if is just a regular transaction)\",\"name\":\"contractAddress\",\"type\":[\"null\",\"bytes\"]},{\"doc\":\"Amount of value transferred in Wei\",\"name\":\"value\",\"type\":\"bytes\"},{\"doc\":\"Amount of gas provided by the sender\",\"name\":\"gas\",\"type\":\"bytes\"},{\"doc\":\"Amount of gas price provided by the sender in Wei\",\"name\":\"gasPrice\",\"type\":\"bytes\"},{\"doc\":\"Amount of gas used consumed by the transaction\",\"name\":\"gasUsed\",\"type\":\"bytes\"},{\"doc\":\"Cumulative gas used by the transaction\",\"name\":\"cumulativeGasUsed\",\"type\":\"bytes\"},{\"doc\":\"Transaction signature v\",\"name\":\"v\",\"type\":\"bytes\"},{\"doc\":\"Transaction signature r\",\"name\":\"r\",\"type\":\"bytes\"},{\"doc\":\"Transaction signature s\",\"name\":\"s\",\"type\":\"bytes\"},{\"doc\":\"Transaction result status\",\"name\":\"status\",\"type\":\"bytes\"},{\"doc\":\"Generated and encoded logs by the transaction\",\"name\":\"logsBloom\",\"type\":\"bytes\"},{\"doc\":\"Logs produced by executing smart contracts\",\"name\":\"logs\",\"type\":{\"items\":{\"fields\":[{\"desc\":\"Address of the contract that generated the event\",\"name\":\"address\",\"type\":\"bytes\"},{\"desc\":\"List of topics provided by the contract\",\"name\":\"topics\",\"type\":{\"items\":\"bytes\",\"type\":\"array\"}},{\"desc\":\"Supplied by the contract, usually ABI-encoded\",\"name\":\"data\",\"type\":\"bytes\"},{\"desc\":\"Index of the log in the receipt\",\"name\":\"index\",\"type\":\"int\"},{\"desc\":\"True if this log was reverted due to a chain reorganisation\",\"name\":\"removed\",\"type\":\"boolean\"}],\"name\":\"Log\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"type\":\"record\"},\"type\":\"array\"}},{\"doc\":\"Trace that describes contract creation, destruction or intenal transactions\",\"name\":\"trace\",\"type\":{\"fields\":[{\"desc\":\"Signals if an error happened during execution\",\"name\":\"isError\",\"type\":\"boolean\"},{\"desc\":\"Stores the error message\",\"name\":\"msg\",\"type\":\"string\"},{\"desc\":\"An array describing transfers\",\"name\":\"transfers\",\"type\":{\"items\":{\"fields\":[{\"doc\":\"Type of op executed inside the transaction\",\"name\":\"op\",\"type\":\"int\"},{\"doc\":\"Raw value of the transaction\",\"name\":\"value\",\"type\":\"bytes\"},{\"doc\":\"Address of the sender\",\"name\":\"from\",\"type\":\"bytes\"},{\"doc\":\"Balance of the sender\",\"name\":\"fromBalance\",\"type\":\"bytes\"},{\"doc\":\"Address of the receiver\",\"name\":\"to\",\"type\":\"bytes\"},{\"doc\":\"Balance of the receiver\",\"name\":\"toBalance\",\"type\":\"bytes\"},{\"doc\":\"Raw input data\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Trace\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"type\":\"record\"}}],\"name\":\"Transaction\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"type\":\"record\"},\"type\":\"array\"}},{\"doc\":\"Array of uncle hashes\",\"name\":\"uncles\",\"type\":{\"items\":\"bytes\",\"type\":\"array\"}}],\"name\":\"Block\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"type\":\"record\"}"
}

func (r *Block) Serialize(w io.Writer) error {
	return writeBlock(r, w)
}
