// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     block.schema.v1.asvc
 *     pendingtx.schema.v1.asvc
 */

package models

import (
	"io"
)

type Block struct {
	Number           int64
	Hash             string
	ParentHash       string
	Uncle            bool
	Status           int32
	Timestamp        int64
	Nonce            int64
	MixDigest        string
	Sha3Uncles       string
	LogsBloom        string
	StateRoot        string
	TransactionsRoot string
	Miner            string
	Difficulty       int64
	TotalDifficulty  int64
	ExtraData        []byte
	Size             int64
	GasLimit         int64
	GasUsed          int64
	TxsFees          int64
	BlockReward      int64
	UncleReward      int64
	Stats            UnionNullBlockStats
	Transactions     []*Transaction
	Uncles           []string
}

func DeserializeBlock(r io.Reader) (*Block, error) {
	return readBlock(r)
}

func NewBlock() *Block {
	v := &Block{
		Transactions: make([]*Transaction, 0),
		Uncles:       make([]string, 0),
	}

	return v
}

func (r *Block) Schema() string {
	return "{\"fields\":[{\"doc\":\"The block number\",\"name\":\"number\",\"type\":\"long\"},{\"doc\":\"Hash of the block\",\"name\":\"hash\",\"type\":\"string\"},{\"doc\":\"Hash of the parent block\",\"name\":\"parentHash\",\"type\":\"string\"},{\"doc\":\"Determines if the block is an uncle or not\",\"name\":\"uncle\",\"type\":\"boolean\"},{\"doc\":\"Specifies the status of the block (could be CanonStatTy or SideStatTy)\",\"name\":\"status\",\"type\":\"int\"},{\"doc\":\"Unix timestamp for when the block was collated\",\"name\":\"timestamp\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"doc\":\"Hash of the generated proof-of-work\",\"name\":\"nonce\",\"type\":\"long\"},{\"doc\":\"Block header mix digest\",\"name\":\"mixDigest\",\"type\":\"string\"},{\"doc\":\"SHA3 of the uncles data in the block\",\"name\":\"sha3Uncles\",\"type\":\"string\"},{\"doc\":\"Bloom filter for the logs of the block\",\"name\":\"logsBloom\",\"type\":\"string\"},{\"doc\":\"Root of the final state trie of the block\",\"name\":\"stateRoot\",\"type\":\"string\"},{\"doc\":\"Root of the final transactions trie of the block\",\"name\":\"transactionsRoot\",\"type\":\"string\"},{\"doc\":\"The address of the beneficiary to whom the mining rewards were given\",\"name\":\"miner\",\"type\":\"string\"},{\"doc\":\"Current difficulty for this block\",\"name\":\"difficulty\",\"type\":\"long\"},{\"doc\":\"Current total difficulty of the chain until this block\",\"name\":\"totalDifficulty\",\"type\":\"long\"},{\"doc\":\"The extra data field of this block\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"doc\":\"Integer the size of this block in bytes\",\"name\":\"size\",\"type\":\"long\"},{\"doc\":\"The maximum gas allowed in this block\",\"name\":\"gasLimit\",\"type\":\"long\"},{\"doc\":\"The total used gas by all transactions in this block\",\"name\":\"gasUsed\",\"type\":\"long\"},{\"doc\":\"Total transaction fees for this block\",\"name\":\"txsFees\",\"type\":\"long\"},{\"doc\":\"Total current block reward\",\"name\":\"blockReward\",\"type\":\"long\"},{\"doc\":\"Total current uncle reward\",\"name\":\"uncleReward\",\"type\":\"long\"},{\"name\":\"stats\",\"type\":[\"null\",{\"fields\":[{\"doc\":\"Time taken to find the block in milliseconds\",\"name\":\"blockTimeMs\",\"type\":\"int\"},{\"doc\":\"Number of failed transactions\",\"name\":\"numFailedTxs\",\"type\":\"int\"},{\"doc\":\"Number of successful transactions\",\"name\":\"numSuccessfulTxs\",\"type\":\"int\"},{\"doc\":\"Average gas price\",\"name\":\"avgGasPrice\",\"type\":\"long\"},{\"doc\":\"Total gas price\",\"name\":\"avgTxsFees\",\"type\":\"long\"}],\"name\":\"BlockStats\",\"namespace\":\"io.enkrypt.bolt.models\",\"type\":\"record\"}]},{\"doc\":\"Array of transactions\",\"name\":\"transactions\",\"type\":{\"items\":{\"fields\":[{\"doc\":\"Hash of the transaction\",\"name\":\"hash\",\"type\":\"string\"},{\"doc\":\"Root of the parent block\",\"name\":\"root\",\"type\":\"string\"},{\"doc\":\"Integer of the transactions index position in the block\",\"name\":\"index\",\"type\":\"int\"},{\"doc\":\"Unix timestamp for when the transaction was collated\",\"name\":\"timestamp\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"doc\":\"Number of transactions sent from a given address\",\"name\":\"nonce\",\"type\":\"long\"},{\"doc\":\"SHA3 of the transaction nonce\",\"name\":\"nonceHash\",\"type\":\"string\"},{\"doc\":\"Address of the sender\",\"name\":\"from\",\"type\":\"string\"},{\"doc\":\"Balance of the sender\",\"name\":\"fromBalance\",\"type\":\"long\"},{\"doc\":\"Address of the recipient (or null when contract creation)\",\"name\":\"to\",\"type\":[\"null\",\"string\"]},{\"doc\":\"Balance of the receiver (or null when contract creation)\",\"name\":\"toBalance\",\"type\":[\"null\",\"long\"]},{\"doc\":\"The data send along with the transaction\",\"name\":\"input\",\"type\":\"bytes\"},{\"doc\":\"If a contract is created, the address of it (or null if is just a regular transaction)\",\"name\":\"contractAddress\",\"type\":[\"null\",\"string\"]},{\"doc\":\"Amount of value transferred in Wei\",\"name\":\"value\",\"type\":\"long\"},{\"doc\":\"Amount of gas provided by the sender\",\"name\":\"gas\",\"type\":\"long\"},{\"doc\":\"Amount of gas price provided by the sender in Wei\",\"name\":\"gasPrice\",\"type\":\"long\"},{\"doc\":\"Amount of gas used consumed by the transaction\",\"name\":\"gasUsed\",\"type\":\"long\"},{\"doc\":\"Cumulative gas used by the transaction\",\"name\":\"cumulativeGasUsed\",\"type\":\"long\"},{\"doc\":\"Transaction signature v\",\"name\":\"v\",\"type\":\"string\"},{\"doc\":\"Transaction signature r\",\"name\":\"r\",\"type\":\"string\"},{\"doc\":\"Transaction signature s\",\"name\":\"s\",\"type\":\"string\"},{\"doc\":\"Transaction result status\",\"name\":\"status\",\"type\":\"long\"},{\"doc\":\"Generated and encoded logs by the transaction\",\"name\":\"logsBloom\",\"type\":\"bytes\"},{\"doc\":\"Logs produced by executing smart contracts\",\"name\":\"logs\",\"type\":{\"items\":{\"fields\":[{\"desc\":\"Address of the contract that generated the event\",\"name\":\"address\",\"type\":\"string\"},{\"desc\":\"List of topics provided by the contract\",\"name\":\"topics\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"desc\":\"Supplied by the contract, usually ABI-encoded\",\"name\":\"data\",\"type\":\"bytes\"},{\"desc\":\"Index of the log in the receipt\",\"name\":\"index\",\"type\":\"int\"},{\"desc\":\"True if this log was reverted due to a chain reorganisation\",\"name\":\"removed\",\"type\":\"boolean\"}],\"name\":\"Log\",\"namespace\":\"io.enkrypt.bolt.models\",\"type\":\"record\"},\"type\":\"array\"}},{\"doc\":\"Trace that describes contract creation, destruction or intenal transactions\",\"name\":\"trace\",\"type\":{\"fields\":[{\"desc\":\"Signals if an error happened during execution\",\"name\":\"isError\",\"type\":\"boolean\"},{\"desc\":\"Stores the error message\",\"name\":\"msg\",\"type\":\"string\"},{\"desc\":\"An array describing transfers\",\"name\":\"transfers\",\"type\":{\"items\":{\"fields\":[{\"doc\":\"Type of op executed inside the transaction\",\"name\":\"op\",\"type\":\"string\"},{\"doc\":\"Raw value of the transaction\",\"name\":\"value\",\"type\":\"string\"},{\"doc\":\"Address of the sender\",\"name\":\"from\",\"type\":\"string\"},{\"doc\":\"Balance of the sender\",\"name\":\"fromBalance\",\"type\":\"string\"},{\"doc\":\"Address of the receiver\",\"name\":\"to\",\"type\":\"string\"},{\"doc\":\"Balance of the receiver\",\"name\":\"toBalance\",\"type\":\"string\"},{\"doc\":\"Raw input data\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"Transfer\",\"namespace\":\"io.enkrypt.bolt.models\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Trace\",\"namespace\":\"io.enkrypt.bolt.models\",\"type\":\"record\"}}],\"name\":\"Transaction\",\"namespace\":\"io.enkrypt.bolt.models\",\"type\":\"record\"},\"type\":\"array\"}},{\"doc\":\"Array of uncle hashes\",\"name\":\"uncles\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"Block\",\"namespace\":\"io.enkrypt.bolt.models\",\"type\":\"record\"}"
}

func (r *Block) Serialize(w io.Writer) error {
	return writeBlock(r, w)
}
